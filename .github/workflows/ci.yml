name: CI/CD Build and Deploy Simulation

on:
  push:
    branches:
      - ci-setup

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: [3.10, 3.11]
        database-name: [hello_web]
        database-user: [postgres]
        database-password: [postgres]
        database-host: [127.0.0.1]
        database-port: [5432]

    services:
      postgres:
        image: postgres:13-alpine
        env:
          POSTGRES_DB: ${{ matrix.database-name }}
          POSTGRES_USER: ${{ matrix.database-user }}
          POSTGRES_PASSWORD: ${{ matrix.database-password }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.pip

      - name: Set environment variables
        run: |
          echo "DATABASE_URL=postgres://${{ matrix.database-user }}:${{ matrix.database-password }}@${{ matrix.database-host }}:${{ matrix.database-port }}/${{ matrix.database-name }}" >> $GITHUB_ENV
          echo "SECRET_KEY=test-secret-key" >> $GITHUB_ENV
          echo "DEBUG=1" >> $GITHUB_ENV
          echo "DJANGO_ALLOWED_HOSTS=localhost" >> $GITHUB_ENV
          echo "GITHUB_WORKFLOW=True" >> $GITHUB_ENV
          echo "MODE=workflow" >> $GITHUB_ENV

      - name: Run migrations
        run: |
          python manage.py makemigrations
          python manage.py migrate
          python manage.py migrate --run-syncdb
          python manage.py check

      - name: Run tests
        run: python manage.py test

      - name: Build Docker images and start containers
        run: |
          # Usa el comando moderno sin guion
          docker compose -f docker-compose.yml build
          docker compose -f docker-compose.yml up -d

      - name: Stop containers
        if: always()
        run: docker compose -f docker-compose.yml down


